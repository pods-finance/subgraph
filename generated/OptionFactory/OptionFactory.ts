// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OptionCreated extends ethereum.Event {
  get params(): OptionCreated__Params {
    return new OptionCreated__Params(this);
  }
}

export class OptionCreated__Params {
  _event: OptionCreated;

  constructor(event: OptionCreated) {
    this._event = event;
  }

  get deployer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get option(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _optionType(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get _exerciseType(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get underlyingAsset(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get strikeAsset(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get strikePrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get exerciseWindowSize(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class OptionFactory extends ethereum.SmartContract {
  static bind(address: Address): OptionFactory {
    return new OptionFactory("OptionFactory", address);
  }

  WETH_ADDRESS(): Address {
    let result = super.call("WETH_ADDRESS", "WETH_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_WETH_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH_ADDRESS", "WETH_ADDRESS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  configurationManager(): Address {
    let result = super.call(
      "configurationManager",
      "configurationManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_configurationManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "configurationManager",
      "configurationManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createOption(
    name: string,
    symbol: string,
    optionType: i32,
    exerciseType: i32,
    underlyingAsset: Address,
    strikeAsset: Address,
    strikePrice: BigInt,
    expiration: BigInt,
    exerciseWindowSize: BigInt
  ): Address {
    let result = super.call(
      "createOption",
      "createOption(string,string,uint8,uint8,address,address,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optionType)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(exerciseType)),
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromAddress(strikeAsset),
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(expiration),
        ethereum.Value.fromUnsignedBigInt(exerciseWindowSize)
      ]
    );

    return result[0].toAddress();
  }

  try_createOption(
    name: string,
    symbol: string,
    optionType: i32,
    exerciseType: i32,
    underlyingAsset: Address,
    strikeAsset: Address,
    strikePrice: BigInt,
    expiration: BigInt,
    exerciseWindowSize: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createOption",
      "createOption(string,string,uint8,uint8,address,address,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optionType)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(exerciseType)),
        ethereum.Value.fromAddress(underlyingAsset),
        ethereum.Value.fromAddress(strikeAsset),
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(expiration),
        ethereum.Value.fromUnsignedBigInt(exerciseWindowSize)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  options(param0: BigInt): Address {
    let result = super.call("options", "options(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_options(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("options", "options(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  podCallBuilder(): Address {
    let result = super.call("podCallBuilder", "podCallBuilder():(address)", []);

    return result[0].toAddress();
  }

  try_podCallBuilder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "podCallBuilder",
      "podCallBuilder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  podPutBuilder(): Address {
    let result = super.call("podPutBuilder", "podPutBuilder():(address)", []);

    return result[0].toAddress();
  }

  try_podPutBuilder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "podPutBuilder",
      "podPutBuilder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wPodCallBuilder(): Address {
    let result = super.call(
      "wPodCallBuilder",
      "wPodCallBuilder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_wPodCallBuilder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "wPodCallBuilder",
      "wPodCallBuilder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wPodPutBuilder(): Address {
    let result = super.call("wPodPutBuilder", "wPodPutBuilder():(address)", []);

    return result[0].toAddress();
  }

  try_wPodPutBuilder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "wPodPutBuilder",
      "wPodPutBuilder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get wethAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get PodPutBuilder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get WPodPutBuilder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get PodCallBuilder(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get WPodCallBuilder(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get ConfigurationManager(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateOptionCall extends ethereum.Call {
  get inputs(): CreateOptionCall__Inputs {
    return new CreateOptionCall__Inputs(this);
  }

  get outputs(): CreateOptionCall__Outputs {
    return new CreateOptionCall__Outputs(this);
  }
}

export class CreateOptionCall__Inputs {
  _call: CreateOptionCall;

  constructor(call: CreateOptionCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get optionType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get exerciseType(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get underlyingAsset(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get strikeAsset(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get strikePrice(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get exerciseWindowSize(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class CreateOptionCall__Outputs {
  _call: CreateOptionCall;

  constructor(call: CreateOptionCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
