// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Metadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Metadata entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Metadata entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Metadata", id.toString(), this);
  }

  static load(id: string): Metadata | null {
    return store.get("Metadata", id) as Metadata | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get optionsMintedAndSold(): BigInt | null {
    let value = this.get("optionsMintedAndSold");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set optionsMintedAndSold(value: BigInt | null) {
    if (value === null) {
      this.unset("optionsMintedAndSold");
    } else {
      this.set("optionsMintedAndSold", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Action extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Action entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Action entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Action", id.toString(), this);
  }

  static load(id: string): Action | null {
    return store.get("Action", id) as Action | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get option(): string {
    let value = this.get("option");
    return value.toString();
  }

  set option(value: string) {
    this.set("option", Value.fromString(value));
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (value === null) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(value as string));
    }
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get inputTokenA(): BigInt {
    let value = this.get("inputTokenA");
    return value.toBigInt();
  }

  set inputTokenA(value: BigInt) {
    this.set("inputTokenA", Value.fromBigInt(value));
  }

  get inputTokenB(): BigInt {
    let value = this.get("inputTokenB");
    return value.toBigInt();
  }

  set inputTokenB(value: BigInt) {
    this.set("inputTokenB", Value.fromBigInt(value));
  }

  get outputTokenA(): BigInt {
    let value = this.get("outputTokenA");
    return value.toBigInt();
  }

  set outputTokenA(value: BigInt) {
    this.set("outputTokenA", Value.fromBigInt(value));
  }

  get outputTokenB(): BigInt {
    let value = this.get("outputTokenB");
    return value.toBigInt();
  }

  set outputTokenB(value: BigInt) {
    this.set("outputTokenB", Value.fromBigInt(value));
  }

  get spotPrice(): string | null {
    let value = this.get("spotPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set spotPrice(value: string | null) {
    if (value === null) {
      this.unset("spotPrice");
    } else {
      this.set("spotPrice", Value.fromString(value as string));
    }
  }

  get metadata(): string | null {
    let value = this.get("metadata");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadata(value: string | null) {
    if (value === null) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromString(value as string));
    }
  }

  get nextIV(): BigInt | null {
    let value = this.get("nextIV");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextIV(value: BigInt | null) {
    if (value === null) {
      this.unset("nextIV");
    } else {
      this.set("nextIV", Value.fromBigInt(value as BigInt));
    }
  }

  get nextSellingPrice(): BigInt | null {
    let value = this.get("nextSellingPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextSellingPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("nextSellingPrice");
    } else {
      this.set("nextSellingPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get nextBuyingPrice(): BigInt | null {
    let value = this.get("nextBuyingPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextBuyingPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("nextBuyingPrice");
    } else {
      this.set("nextBuyingPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get nextDynamicSellingPrice(): BigInt | null {
    let value = this.get("nextDynamicSellingPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextDynamicSellingPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("nextDynamicSellingPrice");
    } else {
      this.set("nextDynamicSellingPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get nextDynamicBuyingPrice(): BigInt | null {
    let value = this.get("nextDynamicBuyingPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextDynamicBuyingPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("nextDynamicBuyingPrice");
    } else {
      this.set("nextDynamicBuyingPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get nextUserTokenALiquidity(): BigInt | null {
    let value = this.get("nextUserTokenALiquidity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextUserTokenALiquidity(value: BigInt | null) {
    if (value === null) {
      this.unset("nextUserTokenALiquidity");
    } else {
      this.set("nextUserTokenALiquidity", Value.fromBigInt(value as BigInt));
    }
  }

  get nextUserTokenBLiquidity(): BigInt | null {
    let value = this.get("nextUserTokenBLiquidity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextUserTokenBLiquidity(value: BigInt | null) {
    if (value === null) {
      this.unset("nextUserTokenBLiquidity");
    } else {
      this.set("nextUserTokenBLiquidity", Value.fromBigInt(value as BigInt));
    }
  }

  get nextTBA(): BigInt | null {
    let value = this.get("nextTBA");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextTBA(value: BigInt | null) {
    if (value === null) {
      this.unset("nextTBA");
    } else {
      this.set("nextTBA", Value.fromBigInt(value as BigInt));
    }
  }

  get nextTBB(): BigInt | null {
    let value = this.get("nextTBB");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextTBB(value: BigInt | null) {
    if (value === null) {
      this.unset("nextTBB");
    } else {
      this.set("nextTBB", Value.fromBigInt(value as BigInt));
    }
  }

  get nextDBA(): BigInt | null {
    let value = this.get("nextDBA");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextDBA(value: BigInt | null) {
    if (value === null) {
      this.unset("nextDBA");
    } else {
      this.set("nextDBA", Value.fromBigInt(value as BigInt));
    }
  }

  get nextDBB(): BigInt | null {
    let value = this.get("nextDBB");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextDBB(value: BigInt | null) {
    if (value === null) {
      this.unset("nextDBB");
    } else {
      this.set("nextDBB", Value.fromBigInt(value as BigInt));
    }
  }

  get nextFeesA(): BigInt | null {
    let value = this.get("nextFeesA");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextFeesA(value: BigInt | null) {
    if (value === null) {
      this.unset("nextFeesA");
    } else {
      this.set("nextFeesA", Value.fromBigInt(value as BigInt));
    }
  }

  get nextFeesB(): BigInt | null {
    let value = this.get("nextFeesB");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextFeesB(value: BigInt | null) {
    if (value === null) {
      this.unset("nextFeesB");
    } else {
      this.set("nextFeesB", Value.fromBigInt(value as BigInt));
    }
  }

  get nextCollateralTVL(): BigInt | null {
    let value = this.get("nextCollateralTVL");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextCollateralTVL(value: BigInt | null) {
    if (value === null) {
      this.unset("nextCollateralTVL");
    } else {
      this.set("nextCollateralTVL", Value.fromBigInt(value as BigInt));
    }
  }

  get nextPoolTokenATVL(): BigInt | null {
    let value = this.get("nextPoolTokenATVL");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextPoolTokenATVL(value: BigInt | null) {
    if (value === null) {
      this.unset("nextPoolTokenATVL");
    } else {
      this.set("nextPoolTokenATVL", Value.fromBigInt(value as BigInt));
    }
  }

  get nextPoolTokenBTVL(): BigInt | null {
    let value = this.get("nextPoolTokenBTVL");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextPoolTokenBTVL(value: BigInt | null) {
    if (value === null) {
      this.unset("nextPoolTokenBTVL");
    } else {
      this.set("nextPoolTokenBTVL", Value.fromBigInt(value as BigInt));
    }
  }

  get nextUserSnapshotFIMP(): BigInt | null {
    let value = this.get("nextUserSnapshotFIMP");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextUserSnapshotFIMP(value: BigInt | null) {
    if (value === null) {
      this.unset("nextUserSnapshotFIMP");
    } else {
      this.set("nextUserSnapshotFIMP", Value.fromBigInt(value as BigInt));
    }
  }

  get nextUserTokenAOriginalBalance(): BigInt | null {
    let value = this.get("nextUserTokenAOriginalBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextUserTokenAOriginalBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("nextUserTokenAOriginalBalance");
    } else {
      this.set(
        "nextUserTokenAOriginalBalance",
        Value.fromBigInt(value as BigInt)
      );
    }
  }

  get nextUserTokenBOriginalBalance(): BigInt | null {
    let value = this.get("nextUserTokenBOriginalBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextUserTokenBOriginalBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("nextUserTokenBOriginalBalance");
    } else {
      this.set(
        "nextUserTokenBOriginalBalance",
        Value.fromBigInt(value as BigInt)
      );
    }
  }

  get nextABPrice(): BigInt | null {
    let value = this.get("nextABPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextABPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("nextABPrice");
    } else {
      this.set("nextABPrice", Value.fromBigInt(value as BigInt));
    }
  }
}

export class SpotPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SpotPrice entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SpotPrice entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SpotPrice", id.toString(), this);
  }

  static load(id: string): SpotPrice | null {
    return store.get("SpotPrice", id) as SpotPrice | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get action(): string | null {
    let value = this.get("action");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set action(value: string | null) {
    if (value === null) {
      this.unset("action");
    } else {
      this.set("action", Value.fromString(value as string));
    }
  }
}

export class Manager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Manager entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Manager entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Manager", id.toString(), this);
  }

  static load(id: string): Manager | null {
    return store.get("Manager", id) as Manager | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get configurations(): Array<string> {
    let value = this.get("configurations");
    return value.toStringArray();
  }

  set configurations(value: Array<string>) {
    this.set("configurations", Value.fromStringArray(value));
  }

  get configuration(): string {
    let value = this.get("configuration");
    return value.toString();
  }

  set configuration(value: string) {
    this.set("configuration", Value.fromString(value));
  }
}

export class Configuration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Configuration entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Configuration entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Configuration", id.toString(), this);
  }

  static load(id: string): Configuration | null {
    return store.get("Configuration", id) as Configuration | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }

  get optionFactory(): string | null {
    let value = this.get("optionFactory");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set optionFactory(value: string | null) {
    if (value === null) {
      this.unset("optionFactory");
    } else {
      this.set("optionFactory", Value.fromString(value as string));
    }
  }

  get optionHelper(): string | null {
    let value = this.get("optionHelper");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set optionHelper(value: string | null) {
    if (value === null) {
      this.unset("optionHelper");
    } else {
      this.set("optionHelper", Value.fromString(value as string));
    }
  }

  get poolFactory(): string | null {
    let value = this.get("poolFactory");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolFactory(value: string | null) {
    if (value === null) {
      this.unset("poolFactory");
    } else {
      this.set("poolFactory", Value.fromString(value as string));
    }
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class OptionFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OptionFactory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OptionFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OptionFactory", id.toString(), this);
  }

  static load(id: string): OptionFactory | null {
    return store.get("OptionFactory", id) as OptionFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get options(): Array<string> | null {
    let value = this.get("options");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set options(value: Array<string> | null) {
    if (value === null) {
      this.unset("options");
    } else {
      this.set("options", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class OptionHelper extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OptionHelper entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OptionHelper entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OptionHelper", id.toString(), this);
  }

  static load(id: string): OptionHelper | null {
    return store.get("OptionHelper", id) as OptionHelper | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class PoolFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolFactory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolFactory", id.toString(), this);
  }

  static load(id: string): PoolFactory | null {
    return store.get("PoolFactory", id) as PoolFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pools(): Array<string> | null {
    let value = this.get("pools");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pools(value: Array<string> | null) {
    if (value === null) {
      this.unset("pools");
    } else {
      this.set("pools", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Option extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Option entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Option entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Option", id.toString(), this);
  }

  static load(id: string): Option | null {
    return store.get("Option", id) as Option | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get type(): i32 {
    let value = this.get("type");
    return value.toI32();
  }

  set type(value: i32) {
    this.set("type", Value.fromI32(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get underlyingAsset(): Bytes {
    let value = this.get("underlyingAsset");
    return value.toBytes();
  }

  set underlyingAsset(value: Bytes) {
    this.set("underlyingAsset", Value.fromBytes(value));
  }

  get strikeAsset(): Bytes {
    let value = this.get("strikeAsset");
    return value.toBytes();
  }

  set strikeAsset(value: Bytes) {
    this.set("strikeAsset", Value.fromBytes(value));
  }

  get underlyingAssetDecimals(): BigInt {
    let value = this.get("underlyingAssetDecimals");
    return value.toBigInt();
  }

  set underlyingAssetDecimals(value: BigInt) {
    this.set("underlyingAssetDecimals", Value.fromBigInt(value));
  }

  get strikeAssetDecimals(): BigInt {
    let value = this.get("strikeAssetDecimals");
    return value.toBigInt();
  }

  set strikeAssetDecimals(value: BigInt) {
    this.set("strikeAssetDecimals", Value.fromBigInt(value));
  }

  get underlyingAssetSymbol(): string {
    let value = this.get("underlyingAssetSymbol");
    return value.toString();
  }

  set underlyingAssetSymbol(value: string) {
    this.set("underlyingAssetSymbol", Value.fromString(value));
  }

  get strikeAssetSymbol(): string {
    let value = this.get("strikeAssetSymbol");
    return value.toString();
  }

  set strikeAssetSymbol(value: string) {
    this.set("strikeAssetSymbol", Value.fromString(value));
  }

  get strikePrice(): BigInt {
    let value = this.get("strikePrice");
    return value.toBigInt();
  }

  set strikePrice(value: BigInt) {
    this.set("strikePrice", Value.fromBigInt(value));
  }

  get expiration(): i32 {
    let value = this.get("expiration");
    return value.toI32();
  }

  set expiration(value: i32) {
    this.set("expiration", Value.fromI32(value));
  }

  get exerciseWindowSize(): i32 {
    let value = this.get("exerciseWindowSize");
    return value.toI32();
  }

  set exerciseWindowSize(value: i32) {
    this.set("exerciseWindowSize", Value.fromI32(value));
  }

  get actions(): Array<string> {
    let value = this.get("actions");
    return value.toStringArray();
  }

  set actions(value: Array<string>) {
    this.set("actions", Value.fromStringArray(value));
  }

  get positions(): Array<string> | null {
    let value = this.get("positions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set positions(value: Array<string> | null) {
    if (value === null) {
      this.unset("positions");
    } else {
      this.set("positions", Value.fromStringArray(value as Array<string>));
    }
  }

  get hourActivity(): Array<string> | null {
    let value = this.get("hourActivity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set hourActivity(value: Array<string> | null) {
    if (value === null) {
      this.unset("hourActivity");
    } else {
      this.set("hourActivity", Value.fromStringArray(value as Array<string>));
    }
  }

  get dayActivity(): Array<string> | null {
    let value = this.get("dayActivity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set dayActivity(value: Array<string> | null) {
    if (value === null) {
      this.unset("dayActivity");
    } else {
      this.set("dayActivity", Value.fromStringArray(value as Array<string>));
    }
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (value === null) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(value as string));
    }
  }

  get exerciseStart(): i32 {
    let value = this.get("exerciseStart");
    return value.toI32();
  }

  set exerciseStart(value: i32) {
    this.set("exerciseStart", Value.fromI32(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get option(): string {
    let value = this.get("option");
    return value.toString();
  }

  set option(value: string) {
    this.set("option", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get tokenA(): Bytes {
    let value = this.get("tokenA");
    return value.toBytes();
  }

  set tokenA(value: Bytes) {
    this.set("tokenA", Value.fromBytes(value));
  }

  get tokenB(): Bytes {
    let value = this.get("tokenB");
    return value.toBytes();
  }

  set tokenB(value: Bytes) {
    this.set("tokenB", Value.fromBytes(value));
  }

  get tokenADecimals(): BigInt {
    let value = this.get("tokenADecimals");
    return value.toBigInt();
  }

  set tokenADecimals(value: BigInt) {
    this.set("tokenADecimals", Value.fromBigInt(value));
  }

  get tokenBDecimals(): BigInt {
    let value = this.get("tokenBDecimals");
    return value.toBigInt();
  }

  set tokenBDecimals(value: BigInt) {
    this.set("tokenBDecimals", Value.fromBigInt(value));
  }

  get tokenASymbol(): string {
    let value = this.get("tokenASymbol");
    return value.toString();
  }

  set tokenASymbol(value: string) {
    this.set("tokenASymbol", Value.fromString(value));
  }

  get tokenBSymbol(): string {
    let value = this.get("tokenBSymbol");
    return value.toString();
  }

  set tokenBSymbol(value: string) {
    this.set("tokenBSymbol", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get actions(): Array<string> | null {
    let value = this.get("actions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set actions(value: Array<string> | null) {
    if (value === null) {
      this.unset("actions");
    } else {
      this.set("actions", Value.fromStringArray(value as Array<string>));
    }
  }

  get positions(): Array<string> | null {
    let value = this.get("positions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set positions(value: Array<string> | null) {
    if (value === null) {
      this.unset("positions");
    } else {
      this.set("positions", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Position entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Position entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Position", id.toString(), this);
  }

  static load(id: string): Position | null {
    return store.get("Position", id) as Position | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get option(): string {
    let value = this.get("option");
    return value.toString();
  }

  set option(value: string) {
    this.set("option", Value.fromString(value));
  }

  get expiration(): i32 {
    let value = this.get("expiration");
    return value.toI32();
  }

  set expiration(value: i32) {
    this.set("expiration", Value.fromI32(value));
  }

  get premiumPaid(): BigInt {
    let value = this.get("premiumPaid");
    return value.toBigInt();
  }

  set premiumPaid(value: BigInt) {
    this.set("premiumPaid", Value.fromBigInt(value));
  }

  get premiumReceived(): BigInt {
    let value = this.get("premiumReceived");
    return value.toBigInt();
  }

  set premiumReceived(value: BigInt) {
    this.set("premiumReceived", Value.fromBigInt(value));
  }

  get optionsBought(): BigInt {
    let value = this.get("optionsBought");
    return value.toBigInt();
  }

  set optionsBought(value: BigInt) {
    this.set("optionsBought", Value.fromBigInt(value));
  }

  get optionsSold(): BigInt {
    let value = this.get("optionsSold");
    return value.toBigInt();
  }

  set optionsSold(value: BigInt) {
    this.set("optionsSold", Value.fromBigInt(value));
  }

  get optionsResold(): BigInt {
    let value = this.get("optionsResold");
    return value.toBigInt();
  }

  set optionsResold(value: BigInt) {
    this.set("optionsResold", Value.fromBigInt(value));
  }

  get optionsMinted(): BigInt {
    let value = this.get("optionsMinted");
    return value.toBigInt();
  }

  set optionsMinted(value: BigInt) {
    this.set("optionsMinted", Value.fromBigInt(value));
  }

  get optionsUnminted(): BigInt {
    let value = this.get("optionsUnminted");
    return value.toBigInt();
  }

  set optionsUnminted(value: BigInt) {
    this.set("optionsUnminted", Value.fromBigInt(value));
  }

  get optionsExercised(): BigInt {
    let value = this.get("optionsExercised");
    return value.toBigInt();
  }

  set optionsExercised(value: BigInt) {
    this.set("optionsExercised", Value.fromBigInt(value));
  }

  get underlyingWithdrawn(): BigInt {
    let value = this.get("underlyingWithdrawn");
    return value.toBigInt();
  }

  set underlyingWithdrawn(value: BigInt) {
    this.set("underlyingWithdrawn", Value.fromBigInt(value));
  }

  get collateralWithdrawn(): BigInt {
    let value = this.get("collateralWithdrawn");
    return value.toBigInt();
  }

  set collateralWithdrawn(value: BigInt) {
    this.set("collateralWithdrawn", Value.fromBigInt(value));
  }

  get initialOptionsProvided(): BigInt {
    let value = this.get("initialOptionsProvided");
    return value.toBigInt();
  }

  set initialOptionsProvided(value: BigInt) {
    this.set("initialOptionsProvided", Value.fromBigInt(value));
  }

  get initialTokensProvided(): BigInt {
    let value = this.get("initialTokensProvided");
    return value.toBigInt();
  }

  set initialTokensProvided(value: BigInt) {
    this.set("initialTokensProvided", Value.fromBigInt(value));
  }

  get finalOptionsRemoved(): BigInt {
    let value = this.get("finalOptionsRemoved");
    return value.toBigInt();
  }

  set finalOptionsRemoved(value: BigInt) {
    this.set("finalOptionsRemoved", Value.fromBigInt(value));
  }

  get finalTokensRemoved(): BigInt {
    let value = this.get("finalTokensRemoved");
    return value.toBigInt();
  }

  set finalTokensRemoved(value: BigInt) {
    this.set("finalTokensRemoved", Value.fromBigInt(value));
  }

  get optionsSent(): BigInt {
    let value = this.get("optionsSent");
    return value.toBigInt();
  }

  set optionsSent(value: BigInt) {
    this.set("optionsSent", Value.fromBigInt(value));
  }

  get optionsReceived(): BigInt {
    let value = this.get("optionsReceived");
    return value.toBigInt();
  }

  set optionsReceived(value: BigInt) {
    this.set("optionsReceived", Value.fromBigInt(value));
  }
}

export class OptionHourActivity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OptionHourActivity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OptionHourActivity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OptionHourActivity", id.toString(), this);
  }

  static load(id: string): OptionHourActivity | null {
    return store.get("OptionHourActivity", id) as OptionHourActivity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get option(): string {
    let value = this.get("option");
    return value.toString();
  }

  set option(value: string) {
    this.set("option", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get day(): i32 {
    let value = this.get("day");
    return value.toI32();
  }

  set day(value: i32) {
    this.set("day", Value.fromI32(value));
  }

  get hour(): i32 {
    let value = this.get("hour");
    return value.toI32();
  }

  set hour(value: i32) {
    this.set("hour", Value.fromI32(value));
  }

  get hourlyPremiumReceived(): BigInt {
    let value = this.get("hourlyPremiumReceived");
    return value.toBigInt();
  }

  set hourlyPremiumReceived(value: BigInt) {
    this.set("hourlyPremiumReceived", Value.fromBigInt(value));
  }

  get hourlyPremiumPaid(): BigInt {
    let value = this.get("hourlyPremiumPaid");
    return value.toBigInt();
  }

  set hourlyPremiumPaid(value: BigInt) {
    this.set("hourlyPremiumPaid", Value.fromBigInt(value));
  }

  get hourlyGrossVolumeOptions(): BigInt {
    let value = this.get("hourlyGrossVolumeOptions");
    return value.toBigInt();
  }

  set hourlyGrossVolumeOptions(value: BigInt) {
    this.set("hourlyGrossVolumeOptions", Value.fromBigInt(value));
  }

  get hourlyGrossVolumeTokens(): BigInt {
    let value = this.get("hourlyGrossVolumeTokens");
    return value.toBigInt();
  }

  set hourlyGrossVolumeTokens(value: BigInt) {
    this.set("hourlyGrossVolumeTokens", Value.fromBigInt(value));
  }

  get hourlyActionsCount(): BigInt {
    let value = this.get("hourlyActionsCount");
    return value.toBigInt();
  }

  set hourlyActionsCount(value: BigInt) {
    this.set("hourlyActionsCount", Value.fromBigInt(value));
  }
}

export class OptionDayActivity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OptionDayActivity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OptionDayActivity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OptionDayActivity", id.toString(), this);
  }

  static load(id: string): OptionDayActivity | null {
    return store.get("OptionDayActivity", id) as OptionDayActivity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get option(): string {
    let value = this.get("option");
    return value.toString();
  }

  set option(value: string) {
    this.set("option", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get day(): i32 {
    let value = this.get("day");
    return value.toI32();
  }

  set day(value: i32) {
    this.set("day", Value.fromI32(value));
  }

  get dailyPremiumReceived(): BigInt {
    let value = this.get("dailyPremiumReceived");
    return value.toBigInt();
  }

  set dailyPremiumReceived(value: BigInt) {
    this.set("dailyPremiumReceived", Value.fromBigInt(value));
  }

  get dailyPremiumPaid(): BigInt {
    let value = this.get("dailyPremiumPaid");
    return value.toBigInt();
  }

  set dailyPremiumPaid(value: BigInt) {
    this.set("dailyPremiumPaid", Value.fromBigInt(value));
  }

  get dailyGrossVolumeOptions(): BigInt {
    let value = this.get("dailyGrossVolumeOptions");
    return value.toBigInt();
  }

  set dailyGrossVolumeOptions(value: BigInt) {
    this.set("dailyGrossVolumeOptions", Value.fromBigInt(value));
  }

  get dailyGrossVolumeTokens(): BigInt {
    let value = this.get("dailyGrossVolumeTokens");
    return value.toBigInt();
  }

  set dailyGrossVolumeTokens(value: BigInt) {
    this.set("dailyGrossVolumeTokens", Value.fromBigInt(value));
  }

  get dailyActionsCount(): BigInt {
    let value = this.get("dailyActionsCount");
    return value.toBigInt();
  }

  set dailyActionsCount(value: BigInt) {
    this.set("dailyActionsCount", Value.fromBigInt(value));
  }
}
